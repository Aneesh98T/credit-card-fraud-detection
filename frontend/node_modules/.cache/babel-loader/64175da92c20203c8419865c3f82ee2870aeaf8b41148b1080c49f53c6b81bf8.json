{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor\napi.interceptors.request.use(config => {\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  console.error('API Error:', error);\n  return Promise.reject(error);\n});\nexport const fraudDetectionAPI = {\n  // Health check\n  healthCheck: () => api.get('/health'),\n  // Model training\n  trainModel: data => api.post('/train', {\n    data\n  }),\n  trainFromCSV: () => api.post('/train-from-csv'),\n  // Fraud prediction\n  predictFraud: transactions => api.post('/predict', {\n    transactions\n  }),\n  // Get model info\n  getModelInfo: () => api.get('/model-info'),\n  // Get sample data\n  getSampleData: () => api.get('/sample-data'),\n  getSamplePredictions: () => api.get('/sample-predictions'),\n  // Get dataset info\n  getDatasetInfo: () => api.get('/dataset-info')\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","error","Promise","reject","response","console","fraudDetectionAPI","healthCheck","get","trainModel","data","post","trainFromCSV","predictFraud","transactions","getModelInfo","getSampleData","getSamplePredictions","getDatasetInfo"],"sources":["C:/Users/DELL/Desktop/credit-card-fraud-detection/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor\napi.interceptors.request.use(\n  (config) => {\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor\napi.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    console.error('API Error:', error);\n    return Promise.reject(error);\n  }\n);\n\nexport const fraudDetectionAPI = {\n  // Health check\n  healthCheck: () => api.get('/health'),\n\n  // Model training\n  trainModel: (data) => api.post('/train', { data }),\n  trainFromCSV: () => api.post('/train-from-csv'),\n\n  // Fraud prediction\n  predictFraud: (transactions) => api.post('/predict', { transactions }),\n\n  // Get model info\n  getModelInfo: () => api.get('/model-info'),\n\n  // Get sample data\n  getSampleData: () => api.get('/sample-data'),\n  getSamplePredictions: () => api.get('/sample-predictions'),\n\n  // Get dataset info\n  getDatasetInfo: () => api.get('/dataset-info'),\n};\n\nexport default api; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAEjF,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,OAAOA,MAAM;AACf,CAAC,EACAC,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAR,GAAG,CAACI,YAAY,CAACO,QAAQ,CAACL,GAAG,CAC1BK,QAAQ,IAAK;EACZ,OAAOA,QAAQ;AACjB,CAAC,EACAH,KAAK,IAAK;EACTI,OAAO,CAACJ,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;EAClC,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,OAAO,MAAMK,iBAAiB,GAAG;EAC/B;EACAC,WAAW,EAAEA,CAAA,KAAMd,GAAG,CAACe,GAAG,CAAC,SAAS,CAAC;EAErC;EACAC,UAAU,EAAGC,IAAI,IAAKjB,GAAG,CAACkB,IAAI,CAAC,QAAQ,EAAE;IAAED;EAAK,CAAC,CAAC;EAClDE,YAAY,EAAEA,CAAA,KAAMnB,GAAG,CAACkB,IAAI,CAAC,iBAAiB,CAAC;EAE/C;EACAE,YAAY,EAAGC,YAAY,IAAKrB,GAAG,CAACkB,IAAI,CAAC,UAAU,EAAE;IAAEG;EAAa,CAAC,CAAC;EAEtE;EACAC,YAAY,EAAEA,CAAA,KAAMtB,GAAG,CAACe,GAAG,CAAC,aAAa,CAAC;EAE1C;EACAQ,aAAa,EAAEA,CAAA,KAAMvB,GAAG,CAACe,GAAG,CAAC,cAAc,CAAC;EAC5CS,oBAAoB,EAAEA,CAAA,KAAMxB,GAAG,CAACe,GAAG,CAAC,qBAAqB,CAAC;EAE1D;EACAU,cAAc,EAAEA,CAAA,KAAMzB,GAAG,CAACe,GAAG,CAAC,eAAe;AAC/C,CAAC;AAED,eAAef,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}