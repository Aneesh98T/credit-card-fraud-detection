{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor\napi.interceptors.request.use(config => {\n  // Add auth token to requests if available\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  var _error$response;\n  // Handle authentication errors\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('fraudDetectionUser');\n    window.location.href = '/';\n  }\n  return Promise.reject(error);\n});\n\n// User Authentication API\nexport const authAPI = {\n  // Register new user\n  register: userData => api.post('/register', userData),\n  // Login user\n  login: credentials => api.post('/login', credentials),\n  // Get current user info\n  getCurrentUser: () => api.get('/user'),\n  // Get all users (admin only)\n  getAllUsers: () => api.get('/users')\n};\n\n// Fraud Detection API\nexport const fraudDetectionAPI = {\n  // Health check\n  healthCheck: () => api.get('/health'),\n  // Model training\n  trainModel: data => api.post('/train', {\n    data\n  }),\n  trainFromCSV: () => api.post('/train-from-csv'),\n  // Fraud prediction\n  predictFraud: transactions => api.post('/predict', {\n    transactions\n  }),\n  // Get model info\n  getModelInfo: () => api.get('/model-info'),\n  // Get sample data\n  getSampleData: () => api.get('/sample-data'),\n  getSamplePredictions: () => api.get('/sample-predictions'),\n  // Get dataset info\n  getDatasetInfo: () => api.get('/dataset-info')\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authAPI","register","userData","post","login","credentials","getCurrentUser","get","getAllUsers","fraudDetectionAPI","healthCheck","trainModel","data","trainFromCSV","predictFraud","transactions","getModelInfo","getSampleData","getSamplePredictions","getDatasetInfo"],"sources":["C:/Users/DELL/Desktop/credit-card-fraud-detection/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor\napi.interceptors.request.use(\n  (config) => {\n    // Add auth token to requests if available\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor\napi.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    // Handle authentication errors\n    if (error.response?.status === 401) {\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('fraudDetectionUser');\n      window.location.href = '/';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// User Authentication API\nexport const authAPI = {\n  // Register new user\n  register: (userData) => api.post('/register', userData),\n  \n  // Login user\n  login: (credentials) => api.post('/login', credentials),\n  \n  // Get current user info\n  getCurrentUser: () => api.get('/user'),\n  \n  // Get all users (admin only)\n  getAllUsers: () => api.get('/users'),\n};\n\n// Fraud Detection API\nexport const fraudDetectionAPI = {\n  // Health check\n  healthCheck: () => api.get('/health'),\n\n  // Model training\n  trainModel: (data) => api.post('/train', { data }),\n  trainFromCSV: () => api.post('/train-from-csv'),\n\n  // Fraud prediction\n  predictFraud: (transactions) => api.post('/predict', { transactions }),\n\n  // Get model info\n  getModelInfo: () => api.get('/model-info'),\n\n  // Get sample data\n  getSampleData: () => api.get('/sample-data'),\n  getSamplePredictions: () => api.get('/sample-predictions'),\n\n  // Get dataset info\n  getDatasetInfo: () => api.get('/dataset-info'),\n};\n\nexport default api; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAEjF,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAC/C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAZ,GAAG,CAACI,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC1BS,QAAQ,IAAK;EACZ,OAAOA,QAAQ;AACjB,CAAC,EACAH,KAAK,IAAK;EAAA,IAAAI,eAAA;EACT;EACA,IAAI,EAAAA,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAClCR,YAAY,CAACS,UAAU,CAAC,WAAW,CAAC;IACpCT,YAAY,CAACS,UAAU,CAAC,oBAAoB,CAAC;IAC7CC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,GAAG;EAC5B;EACA,OAAOR,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMU,OAAO,GAAG;EACrB;EACAC,QAAQ,EAAGC,QAAQ,IAAKxB,GAAG,CAACyB,IAAI,CAAC,WAAW,EAAED,QAAQ,CAAC;EAEvD;EACAE,KAAK,EAAGC,WAAW,IAAK3B,GAAG,CAACyB,IAAI,CAAC,QAAQ,EAAEE,WAAW,CAAC;EAEvD;EACAC,cAAc,EAAEA,CAAA,KAAM5B,GAAG,CAAC6B,GAAG,CAAC,OAAO,CAAC;EAEtC;EACAC,WAAW,EAAEA,CAAA,KAAM9B,GAAG,CAAC6B,GAAG,CAAC,QAAQ;AACrC,CAAC;;AAED;AACA,OAAO,MAAME,iBAAiB,GAAG;EAC/B;EACAC,WAAW,EAAEA,CAAA,KAAMhC,GAAG,CAAC6B,GAAG,CAAC,SAAS,CAAC;EAErC;EACAI,UAAU,EAAGC,IAAI,IAAKlC,GAAG,CAACyB,IAAI,CAAC,QAAQ,EAAE;IAAES;EAAK,CAAC,CAAC;EAClDC,YAAY,EAAEA,CAAA,KAAMnC,GAAG,CAACyB,IAAI,CAAC,iBAAiB,CAAC;EAE/C;EACAW,YAAY,EAAGC,YAAY,IAAKrC,GAAG,CAACyB,IAAI,CAAC,UAAU,EAAE;IAAEY;EAAa,CAAC,CAAC;EAEtE;EACAC,YAAY,EAAEA,CAAA,KAAMtC,GAAG,CAAC6B,GAAG,CAAC,aAAa,CAAC;EAE1C;EACAU,aAAa,EAAEA,CAAA,KAAMvC,GAAG,CAAC6B,GAAG,CAAC,cAAc,CAAC;EAC5CW,oBAAoB,EAAEA,CAAA,KAAMxC,GAAG,CAAC6B,GAAG,CAAC,qBAAqB,CAAC;EAE1D;EACAY,cAAc,EAAEA,CAAA,KAAMzC,GAAG,CAAC6B,GAAG,CAAC,eAAe;AAC/C,CAAC;AAED,eAAe7B,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}